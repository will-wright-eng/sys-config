# name: build

# on: [push]

<<<<<<< HEAD
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # inputs:
    #   logLevel:
    #     description: 'Log level'     
    #     required: true
    #     default: 'warning'
    #   tags:
    #     description: 'Test scenario tags'

jobs:
  build:
    # if: ${{ github.event.label.name == 'build' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
=======
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: ["3.9"]

#     steps:
#     - uses: actions/checkout@v3
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v2.2.2
#       with:
#         python-version: ${{ matrix.python-version }}
>>>>>>> main

#     - name: Install poetry
#       run: make poetry-download

#     - name: Set up cache
#       uses: actions/cache@v2.1.6
#       with:
#         path: .venv
#         key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
#     - name: Install dependencies
#       run: |
#         poetry config virtualenvs.in-project true
#         poetry install

#     # - name: Run style checks
#     #   run: |
#     #     make check-codestyle

#     # - name: Run tests
#     #   run: |
#     #     make test

<<<<<<< HEAD
    - name: Run tests
      run: |
        make test

    - name: Run safety checks
      run: |
        make check-safety
  # printInputs:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - run: |
  #       echo "Log level: ${{ github.event.inputs.logLevel }}"
  #       echo "Tags: ${{ github.event.inputs.tags }}" 
=======
#     # - name: Run safety checks
#     #   run: |
#     #     make check-safety
>>>>>>> main
